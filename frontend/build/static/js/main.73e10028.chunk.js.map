{"version":3,"sources":["components/BarChart.js","components/PieChart.js","components/Chart.js","components/Charts.js","App.js","reportWebVitals.js","index.js"],"names":["barColors","BarGraph","graphData","data","map","value","index","name","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","entry","Cell","fill","COLORS","RADIAN","Math","PI","PieGraph","CustomTooltip","payload","active","className","PieChart","Pie","cx","cy","labelLine","label","midAngle","innerRadius","outerRadius","percent","radius","x","cos","y","sin","textAnchor","dominantBaseline","toFixed","length","content","Chart","type","elements","Charts","useState","charts","setCharts","loading","setLoading","useEffect","a","axios","get","then","result","fetchData","console","log","gutter","xs","sm","md","lg","chart","span","style","_id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73e10028.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\n\r\nconst barColors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", '#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\n\r\nfunction BarGraph({data}) {\r\n  const graphData = data.map((value, index) =>  {\r\n    return {\r\n      name: `Point-${index+1}`,\r\n      value: value\r\n    }\r\n  })\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={graphData}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey=\"value\">\r\n            {\r\n              graphData.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={barColors[index % 7]} />\r\n              ))\r\n            }\r\n          </Bar>\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nexport default BarGraph;\r\n","import React from 'react';\r\nimport { PieChart, Pie, Tooltip, Cell, ResponsiveContainer } from 'recharts';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\nconst RADIAN = Math.PI / 180;\r\n\r\nfunction PieGraph({data}) {\r\n  const graphData = data.map((value,index) => {\r\n    return {\r\n      name: `Point-${index+1}`,\r\n      value: value\r\n    }\r\n  })\r\n  const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n    return (\r\n      <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n        {`${(percent * 100).toFixed(0)}%`}\r\n      </text>\r\n    );\r\n  };\r\n\r\n  function CustomTooltip({ payload, active }) {\r\n    if (active) {\r\n      return (\r\n        <div className=\"custom-tooltip\">\r\n          <p className=\"label\">{`${payload[0].name} : ${payload[0].value}%`}</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={400}>\r\n      <PieChart width={400} height={400}>\r\n        <Pie\r\n          data={graphData}\r\n          cx=\"50%\"\r\n          cy=\"50%\"\r\n          labelLine={false}\r\n          label={renderCustomizedLabel}\r\n          outerRadius={120}\r\n          fill=\"#8884d8\"\r\n          dataKey=\"value\"\r\n        >\r\n          {data.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n          ))}\r\n        </Pie>\r\n        <Tooltip content={<CustomTooltip />}/>\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nexport default PieGraph;\r\n","import React from 'react';\r\nimport BarChart from \"./BarChart\";\r\nimport PieChart from \"./PieChart\";\r\n\r\nfunction Chart({type, elements}) {\r\n\r\n  return (\r\n    type === \"Bar\" ?\r\n      <BarChart data={elements} />\r\n      : <PieChart data={elements} />\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport { Spin, Row, Col, Card } from 'antd';\r\nimport Chart from './Chart';\r\n\r\nfunction Charts() {\r\n  const [charts, setCharts] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(()=> {\r\n    const fetchData = async() => {\r\n      await axios.get('/api/v1/charts').then(result => {\r\n        setCharts(result.data.charts);\r\n        setLoading(false);\r\n      })\r\n\r\n    }\r\n    fetchData();\r\n  },[])\r\n  console.log(\"charts\", charts);\r\n  return (\r\n    <Row gutter={[\r\n      { xs: 8, sm: 16, md: 24, lg: 32 },\r\n      { xs: 8, sm: 16, md: 24, lg: 32 }\r\n    ]}>\r\n      {loading ? (\r\n        <div className=\"spinner\">\r\n          <Spin />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {charts.map(chart => {\r\n            return (\r\n              <Col className=\"gutter-row\" span={8} key={chart._id}>\r\n                <Card style={{ width: \"100%\", height: \"100%\" }}>\r\n                  <Chart type={chart.type} elements={chart.elements}/>\r\n                </Card>\r\n              </Col>\r\n            )\r\n          })}\r\n        </>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","import Charts from \"./components/Charts\";\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Charts />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}